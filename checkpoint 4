//Write a function that accepts an integer from 1 through 10,000, and returns the integer square root of that number
//You can’t use Swift’s built-in sqrt() function or similar – you need to find the square root yourself.
//If the number is less than 1 or greater than 10,000 you should throw an “out of bounds” error.
//You should only consider integer square roots – don’t worry about the square root of 3 being 1.732, for example.
//If you can’t find the square root, throw a “no root” error.

enum userInput: Error {
    case outofBound, noSquareRoot
}

func getSquareRoot(Of number: Int) throws {
    
    var result = 1
    
    if number < 1 || number > 10_000
    {
       throw userInput.outofBound
    }
    
    for root in 1...100
    {
        result = root * root
        if result == number {
            print("The squareroot of \(number) is \(root)!")
            break
        }
    }
    
    if result != number {
        throw userInput.noSquareRoot
    }
}

do {
    try getSquareRoot(Of: 10000)
} catch userInput.outofBound {
    print("The inputted number must be between 1 and 10_000. Please input a different number")
} catch userInput.noSquareRoot {
    print("The inputted number does not have an even square root")
}
